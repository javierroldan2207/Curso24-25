alter session set "_oracle_script"=true;  
create user ConsultasYSubconsulta identified by ConsultasYSubconsulta;
GRANT CONNECT, RESOURCE, DBA TO ConsultasYSubconsulta;


--Tabla pedidos.
CREATE TABLE PEDIDOS(
ID_PEDIDO NUMBER(10),
FECHA_PEDIDO DATE,
TOTAL_PEDIDO NUMBER,
CONSTRAINT PK_PEDIDOS PRIMARY KEY (ID_PEDIDO)
);

--Tabla Productos.
CREATE TABLE PRODUCTOS(
ID_PRODUCTOS NUMBER,
NOMBRE VARCHAR2(25),
PRECIO NUMBER,
STOCK NUMBER,
CONSTRAINT PK_PRODUCTOS PRIMARY KEY (ID_PRODUCTOS)
);
 --Tabla Lineas de pedido.
CREATE TABLE LINEAS_PEDIDO(
ID_LINEA NUMBER,
ID_PEDIDO NUMBER,
ID_PRODUCTO NUMBER,
CANTIDAD NUMBER,
CONSTRAINT PK_LINEAS_PEDIDO PRIMARY KEY (ID_LINEA),
CONSTRAINT FK1_LINEAS_PEDIDO FOREIGN KEY (ID_PEDIDO) REFERENCES PEDIDOS(ID_PEDIDO),
CONSTRAINT FK2_LINEAS_PEDIDO FOREIGN KEY (ID_PRODUCTO) REFERENCES PRODUCTOS(ID_PRODUCTOS)
);

--Tabla auditoria
CREATE TABLE LOG_AUDITORIA(
ID_LOG NUMBER,
TABLA_AFECTADA VARCHAR(25),
OPERACION VARCHAR2(25),
FECHA_EVENTO DATE,
CONSTRAINT PK_LOG_AUDITORIA PRIMARY KEY (ID_LOG)
);


--INSERCCIÓN EN TABLA PEDIDOS

INSERT INTO PEDIDOS 
VALUES (01,TO_DATE('12-03-2024','DD-MM-YYYY'),3);

INSERT INTO PEDIDOS 
VALUES (02,TO_DATE('04-03-2023','DD-MM-YYYY'),2);

INSERT INTO PEDIDOS 
VALUES (04,TO_DATE('05-03-2023','DD-MM-YYYY'),1);
--INSERCCIÓN EN TABLA PRODUCTOS

INSERT INTO PRODUCTOS 
VALUES (01,'Martillo',10,200);

INSERT INTO PRODUCTOS 
VALUES (02,'Pelota',5,400);


--INSERCCIÓN EN TABLA LINEAS_PEDIDO

INSERT INTO LINEAS_PEDIDO 
VALUES (01,01,01,300);

INSERT INTO LINEAS_PEDIDO 
VALUES (02,02,02,20);

INSERT INTO LINEAS_PEDIDO 
VALUES (05,02,02,300);



-----------------------------------Ejercicio 1-----------------------------------------------

CREATE OR REPLACE PROCEDURE procesar_pedido(p_id_pedido IN NUMBER) IS
    ex_stock_insuficiente EXCEPTION;

    CURSOR cur_lineas(p_id NUMBER) IS
        SELECT ID_PRODUCTO, CANTIDAD
        FROM LINEAS_PEDIDO
        WHERE ID_PEDIDO = p_id;

    v_stock PRODUCTOS.STOCK%TYPE;
    v_id_error PRODUCTOS.ID_PRODUCTOS%TYPE; 

BEGIN
    FOR linea IN cur_lineas(p_id_pedido) LOOP
        v_id_error := linea.ID_PRODUCTO; 

        SELECT STOCK INTO v_stock
        FROM PRODUCTOS
        WHERE ID_PRODUCTOS = linea.ID_PRODUCTO;

        IF v_stock >= linea.CANTIDAD THEN
            UPDATE PRODUCTOS
            SET STOCK = STOCK - linea.CANTIDAD
            WHERE ID_PRODUCTOS = linea.ID_PRODUCTO;
        ELSE
            RAISE ex_stock_insuficiente;
        END IF;
    END LOOP;

EXCEPTION
    WHEN ex_stock_insuficiente THEN
        DBMS_OUTPUT.PUT_LINE('Stock insuficiente para el producto con ID: '||);
END;


--CASO DE PRUEBA QUE DEBE PROCESAR PEDIDOS
SELECT * FROM PRODUCTOS p ;

BEGIN
    procesar_pedido(02);
END;

SELECT * FROM PRODUCTOS p ;

BEGIN 
	procesar_pedido(01);
END;
------------------------------


-----------------------------Ejercicio 2--------------------------------
CREATE OR REPLACE TRIGGER auditar_pedidos
AFTER INSERT OR DELETE OR UPDATE ON PEDIDOS
FOR EACH ROW
DECLARE
    v_operacion VARCHAR2(25);
    v_id_log NUMBER;
BEGIN
    IF INSERTING THEN
        v_operacion := 'INSERCION';
    ELSIF DELETING THEN
        v_operacion := 'BORRADO';
    ELSIF UPDATING THEN
        v_operacion := 'ACTUALIZACION';
    END IF;

    SELECT NVL(MAX(ID_LOG), 0) + 1 INTO v_id_log FROM LOG_AUDITORIA;

    INSERT INTO LOG_AUDITORIA (ID_LOG, TABLA_AFECTADA, OPERACION, FECHA_EVENTO)
    VALUES (v_id_log, 'PEDIDOS', v_operacion, SYSDATE);
END;

--CASOS DE PRUEBA TRIGGER
SELECT * FROM LOG_AUDITORIA;

INSERT INTO PEDIDOS VALUES (10, TO_DATE('01-06-2025','DD-MM-YYYY'), 5);

UPDATE PEDIDOS SET TOTAL_PEDIDO = 10 WHERE ID_PEDIDO = 10;

DELETE FROM PEDIDOS WHERE ID_PEDIDO = 10;

SELECT * FROM LOG_AUDITORIA ORDER BY ID_LOG;




------------------Ejercicio 3------------------------





















